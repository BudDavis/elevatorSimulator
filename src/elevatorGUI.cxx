// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "src/elevatorGUI.h"

void UserInterfaceElevator::cb_powerButton_i(Fl_Button*, void*) {
  if (power_status())
{
     power_off();
}
else
{
   power_on();
};
}
void UserInterfaceElevator::cb_powerButton(Fl_Button* o, void* v) {
  ((UserInterfaceElevator*)(o->parent()->parent()->user_data()))->cb_powerButton_i(o,v);
}

void UserInterfaceElevator::cb_4_i(Fl_Button*, void*) {
  eventEnum event;
event=CALL_FLOOR_4;
event_to_controller(event);
}
void UserInterfaceElevator::cb_4(Fl_Button* o, void* v) {
  ((UserInterfaceElevator*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void UserInterfaceElevator::cb_3_i(Fl_Button*, void*) {
  eventEnum event;
event=CALL_FLOOR_3;
event_to_controller(event);
}
void UserInterfaceElevator::cb_3(Fl_Button* o, void* v) {
  ((UserInterfaceElevator*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void UserInterfaceElevator::cb_2_i(Fl_Button*, void*) {
  eventEnum event;
event=CALL_FLOOR_2;
event_to_controller(event);
}
void UserInterfaceElevator::cb_2(Fl_Button* o, void* v) {
  ((UserInterfaceElevator*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

Fl_Double_Window* UserInterfaceElevator::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(630, 445, "elevatorSimulator");
    w = o; if (w) {/* empty */}
    o->user_data((void*)(this));
    { Fl_Pack* o = new Fl_Pack(280, 25, 80, 65, "Current Floor");
      o->box(FL_BORDER_FRAME);
      { currentFloor4 = new Fl_Round_Button(285, 30, 70, 20, "4");
        currentFloor4->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* currentFloor4
      { currentFloor3 = new Fl_Round_Button(285, 50, 70, 20, "3");
        currentFloor3->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* currentFloor3
      { currentFloor2 = new Fl_Round_Button(285, 70, 70, 20, "2");
        currentFloor2->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* currentFloor2
      o->end();
    } // Fl_Pack* o
    { Fl_Group* o = new Fl_Group(415, 165, 135, 25, "Door Status");
      { new Fl_Progress(420, 165, 130, 24, "unknown");
      } // Fl_Progress* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(440, 25, 135, 125, "Power");
      { timeBox = new Fl_Output(480, 67, 70, 28, " ");
        timeBox->box(FL_FLAT_BOX);
      } // Fl_Output* timeBox
      { powerButton = new Fl_Button(475, 25, 70, 35, "null");
        powerButton->callback((Fl_Callback*)cb_powerButton);
      } // Fl_Button* powerButton
      { Fl_Check_Button* o = new Fl_Check_Button(440, 110, 70, 20, "obstruct door");
        o->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Pack* o = new Fl_Pack(280, 120, 45, 240, "Cab Position");
      o->box(FL_BORDER_FRAME);
      { pos40 = new Fl_Round_Button(280, 125, 45, 20, "4");
        pos40->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos40
      { pos38 = new Fl_Round_Button(280, 145, 45, 20);
        pos38->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos38
      { pos36 = new Fl_Round_Button(280, 165, 45, 20);
        pos36->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos36
      { pos34 = new Fl_Round_Button(280, 185, 45, 20);
        pos34->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos34
      { pos32 = new Fl_Round_Button(280, 205, 45, 20);
        pos32->box(FL_BORDER_FRAME);
        pos32->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos32
      { pos30 = new Fl_Round_Button(280, 225, 45, 20, "3");
        pos30->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos30
      { pos28 = new Fl_Round_Button(280, 245, 45, 20);
        pos28->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos28
      { pos26 = new Fl_Round_Button(280, 265, 45, 20);
        pos26->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos26
      { pos24 = new Fl_Round_Button(280, 285, 45, 20);
        pos24->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos24
      { pos22 = new Fl_Round_Button(280, 305, 45, 20);
        pos22->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos22
      { pos20 = new Fl_Round_Button(280, 325, 45, 20, "2");
        pos20->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* pos20
      o->end();
    } // Fl_Pack* o
    { Fl_Pack* o = new Fl_Pack(70, 245, 140, 90, "Floor 2 Call");
      o->box(FL_BORDER_FRAME);
      { new Fl_Light_Button(90, 260, 89, 25, "CALL");
      } // Fl_Light_Button* o
      { new Fl_Light_Button(90, 295, 90, 20, "UPPTAGEN");
      } // Fl_Light_Button* o
      o->end();
    } // Fl_Pack* o
    { Fl_Pack* o = new Fl_Pack(65, 140, 140, 90, "Floor 3 Call");
      o->box(FL_BORDER_FRAME);
      { new Fl_Light_Button(85, 155, 89, 25, "CALL");
      } // Fl_Light_Button* o
      { new Fl_Light_Button(85, 190, 90, 20, "UPPTAGEN");
      } // Fl_Light_Button* o
      o->end();
    } // Fl_Pack* o
    { Fl_Pack* o = new Fl_Pack(60, 25, 140, 90, "Floor 4 Call");
      o->box(FL_BORDER_FRAME);
      { new Fl_Light_Button(80, 40, 89, 25, "CALL");
      } // Fl_Light_Button* o
      { new Fl_Light_Button(80, 75, 90, 20, "UPPTAGEN");
      } // Fl_Light_Button* o
      o->end();
    } // Fl_Pack* o
    { Fl_Group* o = new Fl_Group(345, 235, 215, 220, "Cab Controls and Indicators");
      { Fl_Button* o = new Fl_Button(370, 260, 70, 20, "4");
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(370, 290, 70, 20, "3");
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(370, 320, 70, 20, "2");
        o->callback((Fl_Callback*)cb_2);
      } // Fl_Button* o
      { new Fl_Button(370, 365, 70, 20, "Door");
      } // Fl_Button* o
      { new Fl_Text_Display(465, 260, 50, 30);
      } // Fl_Text_Display* o
      { new Fl_Text_Display(465, 290, 50, 30);
      } // Fl_Text_Display* o
      { new Fl_Text_Display(465, 320, 50, 30);
      } // Fl_Text_Display* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void UserInterfaceElevator::guiTick() {
  timeBox->value(std::to_string(timeInSeconds()).c_str());
  if (power_status()) powerButton->label("ON"); else powerButton->label("OFF"); {
  }
  currentFloor2->value(0);
  currentFloor3->value(0);
  currentFloor4->value(0);
  if (cab_position()==20) currentFloor2->value(1);
  if (cab_position()==30) currentFloor3->value(1);
  if (cab_position()==40) currentFloor4->value(1);
  pos20->value(0);
  pos22->value(0);
  pos24->value(0);
  pos26->value(0);
  pos28->value(0);
  pos30->value(0);
  pos32->value(0);
  pos34->value(0);
  pos36->value(0);
  pos38->value(0);
  pos40->value(0);
  if (cab_position()==20) pos20->value(1);
  if (cab_position()==22) pos22->value(1);
  if (cab_position()==24) pos24->value(1);
  if (cab_position()==26) pos26->value(1);
  if (cab_position()==28) pos28->value(1);
  if (cab_position()==30) pos30->value(1);
  if (cab_position()==32) pos32->value(1);
  if (cab_position()==34) pos34->value(1);
  if (cab_position()==36) pos36->value(1);
  if (cab_position()==38) pos38->value(1);
  if (cab_position()==40) pos40->value(1);
}
